{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: write code and show output on the same qmd file\n",
        "date: 2024-12-25\n",
        "jupyter_client: 5.4.0\n",
        "page-layout: article\n",
        "author: Venu GVGK\n",
        "execute:\n",
        "  freeze: auto\n",
        "categories:\n",
        "    - quarto\n",
        "---\n",
        "\n",
        "I know quarto allows writing code and showing the output on the same page. I wanted to do it. \n",
        "So, first I wrote the code in a python file, checked it is working and then copied it here. and then I pushed it to be published. The run failed. \n",
        "\n",
        "ah, that's because the dependencies listed in the code were not available on the github repository. To fix the issue, one needs to specify dependencies in the quarto document so that they are installed when the document is rendered. \n",
        "\n",
        "There are many ways of doing it. \n",
        "\n",
        "1. specify dependencies in the page header.\n",
        "```    \n",
        "    dependencies:\n",
        "        - numpy\n",
        "        - matplotlib\n",
        "```\n",
        "2. Add the dependendencies to the publish.yml document\n",
        "\n",
        "```\n",
        "- name: Install dependencies\n",
        "      run: |\n",
        "        pip install numpy\n",
        "        pip install matplotlib\n",
        "        # Add other dependencies here\n",
        "```\n",
        "3. Add dependecies to a text document like requirements.txt and then use this to install dependencies through publish.yml. This has the advantage that all you need to do is keep the requirements.txt updated and that will take care of the dependencies. \n",
        "\n",
        "```\n",
        "- name: Install dependencies\n",
        "        run: pip install -r requirements.txt\n",
        "```\n",
        "Now, the file gets published and the code runs. Example code below. \n"
      ],
      "id": "22591442"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#|code-fold: true\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "\n",
        "# function generates random hex color\n",
        "def random_hex_color():\n",
        "    return \"#{:06x}\".format(random.randint(0, 0xFFFFFF))\n",
        "\n",
        "# sets up the subplot\n",
        "figure, axes = plt.subplots()\n",
        "\n",
        "# define radius of the center circle, around whose circumference other circles are drawn\n",
        "\n",
        "r = 10\n",
        "\n",
        "# Draw 24 circles with random colors, 2*np.pi angle is divided into 24 parts, each theta. the center of each circle is determined as r*cos theta and r*sin theta. at this center, circle is drawn with r as radius. \n",
        "\n",
        "for i in range(24):\n",
        "    theta = i * (2 * np.pi / 24)\n",
        "    x1 = r * np.cos(theta)\n",
        "    y1 = r * np.sin(theta)\n",
        "    color = random_hex_color()\n",
        "    draw_circle = plt.Circle((x1, y1), r, fill=True, edgecolor='black',facecolor=color,alpha=0.2)\n",
        "    axes.add_artist(draw_circle) # this adds the circle to the plot. \n",
        "\n",
        "# draw the center circle, this is optional. \n",
        "draw_center_circle=plt.Circle((0,0),10, fill=False, edgecolor='white')\n",
        "axes.add_artist(draw_center_circle)\n",
        "\n",
        "\n",
        "# the plot area aspect ratio and limits are setup\n",
        "axes.set_aspect(1)\n",
        "axes.set_xlim(-2*r, 2*r)\n",
        "axes.set_ylim(-2*r, 2*r)\n",
        "\n",
        "# Hide axes labels\n",
        "axes.set_xticks([])\n",
        "axes.set_yticks([])\n",
        "\n",
        "# Remove the border\n",
        "for spine in axes.spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "plt.show() # this displays the plot. important. "
      ],
      "id": "63becf65",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "That is sorted! "
      ],
      "id": "cd8a8c79"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Venu\\AppData\\Local\\Programs\\Python\\Python312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}